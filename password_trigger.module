<?php

/**
 * Implementation of hook_user().
 */
function password_trigger_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'update' && $category == 'account') {
    if ($edit['pass'] != '') {
      // password is changed, fire trigger
      password_trigger_change($account->mail, user_preferred_language($account));
    }
  }
}

/**
 * Implementation of hook_hook_info().
 */
function password_trigger_hook_info() {
  return array(
    'password_trigger' => array(
      'password_trigger' => array(
        'change' => array(
          'runs when' => t('A password is updated'),
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_action_info_alter().
 */
function password_trigger_action_info_alter(&$info) {
  if (isset($info['system_message_action']['hooks'])) {
    $info['system_message_action']['hooks']['password_trigger'] = array('change');
  }
  if (isset($info['system_send_email_action']['hooks'])) {
    $info['system_send_email_action']['hooks']['password_trigger'] = array('change');
  }
}

/**
 * Function to generate ping events and invoke hook_trigger_example().
 */
function password_trigger_change($recipient, $language) {
  module_invoke_all('password_trigger', 'change', $recipient, $language);
}

/**
 * Implementation of hook_password_trigger().
 */
function password_trigger_password_trigger($op, $recipient, $language) {
  if (!module_exists('trigger')) {
    break;
  }

  if ($aids = _trigger_get_hook_aids('password_trigger', $op)) {
    $context = array(
      'hook' => 'password_trigger',
      'op' => $op,
      'recipient' => $recipient,
      'language' => $language,
    );

    $dummy = new stdClass();
    foreach ($aids as $aid => $action_info) {
      actions_do($aid, $dummy, $context);
    }
  }
}

/**
 * Implementation of hook_action_info().
 */
function password_trigger_action_info() {
  return array(
    'password_trigger_send_email_action' => array(
      'description' => t('Send password change notification e-mail'),
      'type' => 'system',
      'configurable' => TRUE,
      'hooks' => array(
        'user' => array('update'),
      )
    ),
  );
}

/**
 * Return a form definition so the Send email action can be configured.
 *
 * @param $context
 *   Default values (if we are editing an existing action instance).
 * @return
 *   Form definition.
 */
function password_trigger_send_email_action_form($context) {
  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = "Your password was changed on [site-name] by [user-name].\n\n[site-url]";
  }

  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#cols' => '80',
    '#rows' => '20',
    '#description' => t('The message that should be sent.'),
  );

  if (module_exists('token')) {
    $form['help'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Placeholder tokens'),
      '#description' => t("The following placeholder tokens can be used in to generate the URL path. Some tokens may not be available, depending on the context in which the action is triggered."),
    );

    $form['help']['tokens'] = array(
      '#value' => theme('token_help', 'all'),
    );
  }

  return $form;
}

function password_trigger_send_email_action_submit($form, &$form_state) {
  $params = array(
    'subject' => $form_state['values']['subject'],
    'message' => $form_state['values']['message'],
  );
  return $params;
}

/**
 * Implementation of a configurable Drupal action.
 * Sends an email.
 */
function password_trigger_send_email_action($object, $context) {
  $params['from'] = variable_get('site_mail', ini_get('sendmail_from'));
  if (module_exists('token')) {
    token_normalize_context($context);
    $params['subject'] = str_replace(array("\r", "\n"), '', token_replace_multiple($context['subject'], $context));
    $params['body'] = token_replace_multiple($context['message'], $context);
  }
  else {
    $params['subject'] = str_replace(array("\r", "\n"), '', $context['subject']);
    $params['body'] = $context['message'];
  }

  if (drupal_mail('password_trigger', 'action_send_email', $context['recipient'], $context['language'], $params)) {
    watchdog('action', 'Sent email to %recipient', array('%recipient' => $context['recipient']), WATCHDOG_INFO);
  }
  else {
    watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $context['recipient']), WATCHDOG_ERROR);
  }
}

function password_trigger_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

