<?php
/**
 * Implements hook_trigger_info()
 *
 * The first key in the array provides the name of the tab on the Triggers
 * page to which the trigger will be assigned.
 */
function password_trigger_trigger_info() {
  return array(
    'password_trigger' => array(
      'password_trigger' => array(
        'label' => t('A password is updated'),
        ),
      ),
    );
}

/**
 * Implements hook_pwtrigger()
 */
function password_trigger_pwtrigger($options = array()) {
  // Ask the trigger module for all actions enqueued for the
  // 'pwtrigger' trigger.
  $aids = trigger_get_assgned_actions('pwtrigger');
  // Prepare a basic context, indicating the group and "hook", and call all the
  // actions with this context as arguments.
  $context = array(
    'group' => 'password_trigger',
    'hook' => 'pwtrigger'
    );
  actions_do(array_keys($aids), (object) $options, $context);
}

/**
 * Implements hook_user_update().
 *
 * Only fires when the 'pass' key is present in the $edit array.
 */
function password_trigger_user_update(&$edit, $account, $category) {
  if ($category == 'account') {
    if (array_key_exists('pass', $edit)) {
      // password is changed, fire trigger
      password_trigger_change($account->mail, user_preferred_language($account));
    }
  }
}

/**
 * Implements hook_action_info()
 */
function password_trigger_action_info() {
  return array(
    'password_trigger_send_email_action' => array(
      'label' => t('Send password change notification email'),
      'type' => 'password_trigger',
      'configurable' => TRUE,
      'triggers' => array('any'),
      ),
    );
}
