<?php
/**
 * Implements hook_trigger_info()
 *
 * The first key in the array provides the name of the tab on the Triggers
 * page to which the trigger will be assigned.
 */
function password_trigger_trigger_info() {
  return array(
    'password_trigger' => array(
      'password_trigger' => array(
        'label' => t('A password is updated'),
        ),
      ),
    );
}

/**
 * Implements hook_pwtrigger()
 */
function password_trigger_pwtrigger($options = array()) {
  // Ask the trigger module for all actions enqueued for the
  // 'pwtrigger' trigger.
  $aids = trigger_get_assgned_actions('pwtrigger');
  // Prepare a basic context, indicating the group and "hook", and call all the
  // actions with this context as arguments.
  $context = array(
    'group' => 'password_trigger',
    'hook' => 'pwtrigger'
    );
  actions_do(array_keys($aids), (object) $options, $context);
}

/**
 * Implements hook_user_update().
 *
 * Only fires when a user's password is updated, when the 'pass' key is present
 * in the $edit array.
 */
function password_trigger_user_update(&$edit, $account, $category) {
  if ($category == 'account') {
    if (array_key_exists('pass', $edit)) {
      // Do stuff
      password_trigger_basic_action();
    }
  }
}

/**
 * Implements hook_action_info()
 */
function password_trigger_action_info() {
  return array(
    'password_trigger_basic_action' => array(
      'label' => t('Generic test function by Deeter'),
      'type' => 'password_trigger',
      'configurable' => FALSE,
      'triggers' => array('any'),
      ),
    'password_trigger_send_email_action' => array(
      'label' => t('Send password change notification email'),
      'type' => 'password_trigger',
      'configurable' => TRUE,
      'triggers' => array('any'),
      ),
    );
}

/**
 * My generic test function(s)
 */
function password_trigger_basic_action(&$entity, $context = array()) {
  drupal_set_message(t('password_trigger_basic_action fired'));
}

/**
 * Return a form definition so the Send Email action can be configured.
 *
 * @param $context
 *  Default values (if we are editing an existing action instance)
 * @return
 *  Form definition
 */
function password_trigger_send_email_action_form($context) {
  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = "Your password was changed on [site-name] by [user-name].\n\n[site-url]";
  }

  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
    );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#cols' => '80',
    '#rows' => '20',
    '#description' => t('The message that should be sent.'),
    );

  if (module_exists('token')) {
    $form['help'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Placeholder tokens'),
      '#description' => t("The following placeholder tokens can be used in to generate the URL path. Some tokens may not be available, depending on the context in which the action is triggered."),
      );
    $form['help']['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('all'),
      );
  }

  return $form;
}

function password_trigger_send_email_action_submit($form, &$form_state) {
  $params = array(
    'subject' => $form_state['values']['subject'],
    'message' => $form_state['values']['message'],
    );

  return $params;
}

/**
 * Implementation of a configurable Drupal action.
 * Sends an email.
 */
function password_trigger_send_email_action($object, $context) {
  $params['from'] = variable_get('site_mail', ini_get('sendmail_from'));
  if (module_exists('token')) {
    token_normalize_context($context);
    $params['subject'] = str_replace(array("\r", "\n"), '', token_replace_multiple($context['subject'], $context));
    $params['body'] = token_replace_multiple($context['message'], $context);
  }
  else {
    $params['subject'] = str_replace(array("\r", "\n"), '', $context['subject']);
    $params['body'] = $context['message'];
  }

  if (drupal_mail('password_trigger', 'action_send_email', $context['recipient'], $context['language'], $params)) {
    watchdog('action', 'Sent email to %recipient', array('%recipient' => $context['recipient']), WATCHDOG_INFO);
  }
  else {
    watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $context['recipient']), WATCHDOG_ERROR);
  }
}

function password_trigger_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
